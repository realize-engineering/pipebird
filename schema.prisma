generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Tenant {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  identifier   String
  destinations Destination[]
}

model ColumnTransformation {
  id                      Int           @id @default(autoincrement())
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  nameInSource            String
  nameInDestination       String
  destinationFormatString String
  transformer             String
  isPrimaryKey            Boolean
  isLastModified          Boolean
  configuration           Configuration @relation(fields: [configurationId], references: [id])
  configurationId         Int

  @@unique([configurationId, nameInDestination]) // no duplicate configuration columns
}

model Configuration {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  destinations Destination[] // might want to fork data into multiple warehouses
  view         View                   @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId       Int
  columns      ColumnTransformation[]
}

model View {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tableExpression String
  tenantColumn    String

  source         Source          @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  sourceId       Int
  configurations Configuration[]
}

model Source {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String
  status     String   @default("REACHABLE")
  sourceType String
  host       String
  port       Int
  username   String
  password   String

  views View[]
}

model Destination {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  name             String
  status           String   @default("REACHABLE")
  destinationType  String   @default("PROVISIONED_S3")
  connectionString String?

  transfers       Transfer[]
  configuration   Configuration @relation(fields: [configurationId], references: [id], onDelete: Cascade)
  configurationId Int
  tenant          Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId        Int
}

model Transfer {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  finalizedAt DateTime?
  status      String

  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  destinationId Int
}

model Logs {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  eventAction String
  eventSource String
  eventId     String

  meta String
}
