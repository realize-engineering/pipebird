generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ColumnTransformation {
  id                      Int           @id @default(autoincrement())
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  nameInSource            String
  nameInDestination       String
  destinationFormatString String
  transformer             String
  isPrimaryKey            Boolean
  isLastModified          Boolean
  configuration           Configuration @relation(fields: [configurationId], references: [id], onDelete: Cascade)
  configurationId         Int

  @@unique([configurationId, nameInDestination]) // no duplicate configuration columns
}

model Configuration {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  destinations Destination[] // might want to fork data into multiple warehouses
  view         View                   @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId       Int
  columns      ColumnTransformation[]
}

model View {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tableExpression String
  tenantColumn    String

  source         Source          @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  sourceId       Int
  configurations Configuration[]
}

enum ConnectorStatus {
  REACHABLE
  UNREACHABLE
}

enum SourceType {
  MYSQL
  POSTGRES
  REDSHIFT
  SNOWFLAKE
  BIGQUERY
}

model Source {
  id         Int             @id @default(autoincrement())
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  name       String
  status     ConnectorStatus
  sourceType SourceType
  host       String
  port       Int
  username   String
  password   String

  views View[]
}

enum DestinationType {
  POSTGRES
  PROVISIONED_S3
}

model Destination {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  name             String
  status           ConnectorStatus
  destinationType  DestinationType
  connectionString String?

  transfers       Transfer[]
  configuration   Configuration? @relation(fields: [configurationId], references: [id])
  configurationId Int?
  tenantId        String
}

enum TransferStatus {
  STARTED
  PENDING
  COMPLETE
  FAILED
  CANCELLED
}

model Transfer {
  id          Int            @id @default(autoincrement())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  finalizedAt DateTime?
  status      TransferStatus

  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  destinationId Int
}

enum LogDomain {
  SOURCE
  VIEW
  CONFIGURATION
  DESTINATION
  TRANSFER
}

enum LogAction {
  CREATE
  UPDATE
  DELETE
}

model Log {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  domain    LogDomain
  action    LogAction
  domainId  String
  meta      Json
}
